#!/usr/bin/env bash

read -p "Do you want to install the dotfiles? Remark this will overwrite exisiting dotfiles! [y|n] " -r
if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi

read -p "Do you want to install BASH or FISH dotfiles? [BASH|FISH] " -r
dotfiles="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ $REPLY == "BASH" ]]; then
    echo "Installing Bash dotfiles"
    echo "Linking profile files and directories..."
    # Files e.g.: runcom/bash_profile runcom/bashrc vim vim/gvimrc vim/vimrc ...
    for file in runcom/bash_profile runcom/bashrc; do
        homefile=~/.`echo $file | sed -Ee 's/[a-z]+\///'` #This regular expression removes the folder before the filename. e.g.: vim/vimrc --> vimrc
        if [ -e $homefile ]; then
            cp $homefile ${homefile}_old
        fi
        rm -rf "$homefile" 2>/dev/null
        ln -s "$dotfiles/$file" "$homefile"
    done
elif [[ $REPLY == "FISH" ]]; then
    echo "Installing Fish dotfiles"
    configfolder=~/.config
    if [ ! -d $configfolder ]; then
        echo ".config folder didn't exist. Creating it..."
        mkdir $configfolder
    fi
    fishfolder="$configfolder/fish"
    if [ -d $fishfolder ]; then
        echo "Fish folder was already present. Renaming old folder to fish_old..."
        cp -r $fishfolder ${fishfolder}_old
    fi
    rm -rf "$fishfolder" 2>/dev/null
    ln -s "$dotfiles/fish" "$fishfolder"
else
    exit;
fi

# echo "Setting up git..."
# $dotfiles/bin/git-setup-prefs

if $dotfiles/bin/is-macos; then
    read -p "Do you also want to reset macOS defaults? Remark this will overwrite exisiting settings! [iamsure] " -r
    if [[ $REPLY == "iamsure" ]]; then
        echo "Setting up macOS defaults..."
        bash $dotfiles/macos/defaults.sh
    else
        echo "macOS defaults are NOT set."
    fi
fi

# Clean up
unset file dotfiles

echo "Done."

echo "Run the following to activate:"
echo "  cd && source .bashrc"